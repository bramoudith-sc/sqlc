// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: dotstar_test.sql

package spanner_features

import (
	"context"
	"database/sql"
)

const testDotStarWithColumns = `-- name: TestDotStarWithColumns :many
SELECT u.*, p.title
FROM users u
JOIN posts p ON u.id = p.user_id
WHERE u.deleted_at IS NULL;
`

type TestDotStarWithColumnsRow struct {
	Column1 interface{}
	Title   sql.NullString
}

// Test table.* with additional columns
func (q *Queries) TestDotStarWithColumns(ctx context.Context) ([]TestDotStarWithColumnsRow, error) {
	rows, err := q.db.QueryContext(ctx, testDotStarWithColumns)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TestDotStarWithColumnsRow
	for rows.Next() {
		var i TestDotStarWithColumnsRow
		if err := rows.Scan(&i.Column1, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const testSimpleDotStar = `-- name: TestSimpleDotStar :many

SELECT u.*
FROM users u
WHERE u.deleted_at IS NULL;
`

// Test DotStar syntax
// Test basic table.* syntax
func (q *Queries) TestSimpleDotStar(ctx context.Context) ([]interface{}, error) {
	rows, err := q.db.QueryContext(ctx, testSimpleDotStar)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var column_1 interface{}
		if err := rows.Scan(&column_1); err != nil {
			return nil, err
		}
		items = append(items, column_1)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
