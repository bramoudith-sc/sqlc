// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package spanner_test

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id, name, email) VALUES (@id, @name, @email);
`

type CreateUserParams struct {
	ID    string
	Name  sql.NullString
	Email sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.ID, arg.Name, arg.Email)
	return err
}

const createUserReturning = `-- name: CreateUserReturning :one
INSERT INTO users (id, name, email) VALUES (@id, @name, @email) THEN RETURN id, name, email;
`

type CreateUserReturningParams struct {
	ID    string
	Name  sql.NullString
	Email sql.NullString
}

func (q *Queries) CreateUserReturning(ctx context.Context, arg CreateUserReturningParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUserReturning, arg.ID, arg.Name, arg.Email)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.Email)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = @id;
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, email FROM users WHERE id = @user_id;
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.Email)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, email FROM users ORDER BY name;
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Name, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersStarTest = `-- name: ListUsersStarTest :many
SELECT id, name, email FROM users ORDER BY name;
`

func (q *Queries) ListUsersStarTest(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsersStarTest)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Name, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET name = @name, email = @email WHERE id = @id;
`

type UpdateUserParams struct {
	Name  sql.NullString
	Email sql.NullString
	ID    string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.Name, arg.Email, arg.ID)
	return err
}
